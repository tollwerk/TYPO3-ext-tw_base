<?php
/**
 * Ziereis Relaunch
 *
 * @category   Tollwerk
 * @package    Tollwerk\TwZiereis
 * @subpackage Tollwerk\TwZiereis\Controller
 * @author     Klaus Fiedler <klaus@tollwerk.de> / @jkphl
 * @copyright  Copyright © 2019 Klaus Fiedler <klaus@tollwerk.de>
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 */

/***********************************************************************************
 *  The MIT License (MIT)
 *
 *  Copyright © 2019 Klaus Fiedler <klaus@tollwerk.de>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of
 *  this software and associated documentation files (the "Software"), to deal in
 *  the Software without restriction, including without limitation the rights to
 *  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 *  the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 *  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 *  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ***********************************************************************************/

namespace Tollwerk\TwBase\Controller;

use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
use TYPO3\CMS\Extbase\Mvc\View\JsonView;

class AjaxController extends ActionController
{
    const STATUS_ERROR = 500;
    const STATUS_NO_METHOD = 400;
    const STATUS_SUCCESS = 200;

    /**
     * Return a JSON encoded array containing a status and the method result
     *
     * @param string $status
     * @param mixed $result
     * @param \Exception|null $exception
     *
     * @return string
     */
    private function createJsonResponse(string $status, $result = null, \Exception $exception = null)
    {
        $return = [
            'status' => intval($status),
            'result' => $result
        ];

        if ($exception) {
            $devIpMask = GeneralUtility::trimExplode(',', $GLOBALS['TYPO3_CONF_VARS']['SYS']['devIPmask']);
            if (in_array($_SERVER['REMOTE_ADDR'], $devIpMask)) {
                $return['exception'] = [
                    'message' => $exception->getMessage(),
                    'code' => $exception->getCode(),
                    'file' => $exception->getFile(),
                    'line' => $exception->getLine(),
                ];
            }
        }

        return json_encode($return);
    }

    public function resolveActionMethodName()
    {
        return parent::resolveActionMethodName(); // TODO: Change the autogenerated stub
    }

    /**
     * The central action to call via ajax.
     * Will call the corresponding controller method if it exists
     *
     * @param string $call     Which method to call
     * @param array $arguments The method parameters
     *
     * @return mixed    Returns null if no controller method found
     */
    public function dispatchAction()
    {
            $method = GeneralUtility::_GP('call');
            $arguments = GeneralUtility::_GP('args') ?: [];

            if (is_callable([$this, $method])) {
                return $this->createJsonResponse(
                    self::STATUS_SUCCESS,
                    $this->{$method}($arguments)
                );
            }

            return $this->createJsonResponse(self::STATUS_NO_METHOD);


    }
}